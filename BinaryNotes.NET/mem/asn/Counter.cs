
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace mmwl.AMQP.ASN1Classes.Just {


    [ASN1PreparedElement]
    [ASN1Sequence ( Name = "Counter", IsSet = false  )]
    public class Counter : IASN1PreparedElement {
                    
	private string gatewayId_ ;
	[ASN1String( Name = "", 
        StringType =  UniversalTags.IA5String , IsUCS = false )]
        [ASN1Element ( Name = "gatewayId", IsOptional =  true , HasTag =  true, Tag = 0 , HasDefaultValue =  false )  ]
    
        public string GatewayId
        {
            get { return gatewayId_; }
            set { gatewayId_ = value;  }
        }
        
                
          
	private string connectionName_ ;
	[ASN1String( Name = "", 
        StringType =  UniversalTags.IA5String , IsUCS = false )]
        [ASN1Element ( Name = "connectionName", IsOptional =  false , HasTag =  true, Tag = 1 , HasDefaultValue =  false )  ]
    
        public string ConnectionName
        {
            get { return connectionName_; }
            set { connectionName_ = value;  }
        }
        
                
          
	private TypeEnumType type_ ;
	


    [ASN1PreparedElement]
    [ASN1Enum ( Name = "TypeEnumType")]
    public class TypeEnumType : IASN1PreparedElement {        
        public enum EnumType {
            
            [ASN1EnumItem ( Name = "smsOut", HasTag = true , Tag = 1 )]
            smsOut , 
            [ASN1EnumItem ( Name = "smsIn", HasTag = true , Tag = 2 )]
            smsIn , 
            [ASN1EnumItem ( Name = "mmsOut", HasTag = true , Tag = 3 )]
            mmsOut , 
            [ASN1EnumItem ( Name = "mmsIn", HasTag = true , Tag = 4 )]
            mmsIn,
            [ASN1EnumItem ( Name = "smscStatusSuccess", HasTag = true , Tag = 5 )]
            smscStatusSuccess,
            [ASN1EnumItem ( Name = "smscStatusDelivered", HasTag = true , Tag = 6 )]
            smscStatusDelivered,
            [ASN1EnumItem ( Name = "smscStatusExpired", HasTag = true , Tag = 7 )]
            smscStatusExpired,
            [ASN1EnumItem ( Name = "smscStatusUndeliverable", HasTag = true , Tag = 8 )]
            smscStatusUndeliverable
        }
        
        private EnumType val;
        
        public EnumType Value
        {
            get { return val; }
            set { val = value; }
        }        

            public void initWithDefaults()
	    {
	    }


            private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(TypeEnumType));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

                
    }

                
        [ASN1Element ( Name = "type", IsOptional =  true , HasTag =  true, Tag = 2 , HasDefaultValue =  false )  ]
    
        public TypeEnumType Type
        {
            get { return type_; }
            set { type_ = value;  }
        }
        
                
          
	private long count_ ;
	[ASN1Integer( Name = "" )]
    
        [ASN1Element ( Name = "count", IsOptional =  false , HasTag =  true, Tag = 3 , HasDefaultValue =  false )  ]
    
        public long Count
        {
            get { return count_; }
            set { count_ = value;  }
        }
        
                
  

            public void initWithDefaults() {
            	
            }

        private string customerId_;

        private bool customerId_present = false;
        [ASN1String(Name = "",
            StringType = UniversalTags.IA5String, IsUCS = false)]
        [ASN1Element(Name = "customerId", IsOptional = true, HasTag = true, Tag = 4, HasDefaultValue = false)]

        public string CustomerId
        {
            get { return customerId_; }
            set { customerId_ = value; customerId_present = true; }
        }



        public bool isCustomerIdPresent()
        {
            return this.customerId_present == true;
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Counter));
            public IASN1PreparedElementData PreparedData {
            	get { return preparedData; }
            }

            
    }
            
}
